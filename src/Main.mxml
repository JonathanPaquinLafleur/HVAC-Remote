<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   applicationDPI="480" backgroundColor="0x393e46" creationComplete="creationCompleteHandler(event)" xmlns:local="*" xmlns:components="components.*">
	
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenMax;
			
			import mx.events.FlexEvent;
			
			import spark.filters.DropShadowFilter;
			import spark.filters.GlowFilter;
			
			private var _power:String;
			private var _temp:uint;
			private var _mode:uint;
			private var _fanSpeed:uint;
			private var _vanne:uint;
			private var _statesInit:Boolean = false;
			
			private var loader:URLLoader = new URLLoader();
			private var debouncing:Boolean = false;
			private var debounceTimer:Timer;
			private var remoteStateChanged:Boolean;
			
			[Bindable]
			private var shadowFilter:DropShadowFilter = new DropShadowFilter(4,60,0,0.2,0,0,5,3);
			[Bindable]
			private var glowFilter:GlowFilter = new GlowFilter(0xffffff,0.1,350,350,2,1);
			private var _btnStates:SharedObject;
		
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				initStates();
				loader.addEventListener(Event.COMPLETE,loaderComplete);
				loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandlerIOErrorEvent);
				
				powerBtns.btn1.addEventListener(MouseEvent.CLICK,onBtnClickHandler);
				powerBtns.btn2.addEventListener(MouseEvent.CLICK,offBtnClickHandler);
				
				hotColdBtns.btn1.addEventListener(MouseEvent.CLICK,hotBtnClickHandler);
				hotColdBtns.btn2.addEventListener(MouseEvent.CLICK,coldBtnClickHandler);
				dryAutoBtns.btn1.addEventListener(MouseEvent.CLICK,dryBtnClickHandler);
				dryAutoBtns.btn2.addEventListener(MouseEvent.CLICK,autoBtnClickHandler);
			}
			
			private function initStates():void{
				_btnStates = SharedObject.getLocal("ACStates");
				if(_btnStates.data.hasOwnProperty("power"))
					power = _btnStates.data.power;
				else
					power = "on"
				if(_btnStates.data.hasOwnProperty("temp"))
					temp = _btnStates.data.temp;
				else
					temp = 21;
				knob.value = (temp-16)/16;
				if(_btnStates.data.hasOwnProperty("mode"))
					mode = _btnStates.data.mode;
				else
					mode = 1;
				if(_btnStates.data.hasOwnProperty("fanSpeed"))
					fanSpeed = _btnStates.data.fanSpeed;
				else
					fanSpeed = 0;
				if(_btnStates.data.hasOwnProperty("vanne"))
					vanne = _btnStates.data.vanne;
				else
					vanne = 0;
				_statesInit = true;
			}
			
			private function statesChanged():void{
				if(_statesInit){
					_btnStates.data.power = power;
					_btnStates.data.temp = temp;
					_btnStates.data.mode = mode;
					_btnStates.data.fanSpeed = fanSpeed;
					_btnStates.data.vanne = vanne;
					_btnStates.flush();
					remoteStateChanged = true;
					sendRequest();
				}
			}
			
			private function set power(value:String):void{
				_power = value;
				powerBtns.btn1.selected = _power == "on";
				powerBtns.btn2.selected = _power != "on";
				statesChanged();
			}
			
			private function get power():String{
				return _power;
			}
			
			[Bindable]
			private function set temp(value:uint):void{
				if(value > 31)
					value = 31;
				if(value < 16)
					value = 16;
				_temp = value;
			}
			
			private function get temp():uint{
				return _temp;
			}
			
			private function set mode(value:uint):void{
				_mode = value;
				hotColdBtns.btn1.selected = _mode == 0;
				hotColdBtns.btn2.selected = _mode == 1;
				dryAutoBtns.btn1.selected = _mode == 2;
				dryAutoBtns.btn2.selected = _mode == 3;
				statesChanged();
			}
			
			private function get mode():uint{
				return _mode;
			}
			
			private function set fanSpeed(value:uint):void{
				_fanSpeed = value;
				fan1Btn.selected = _fanSpeed == 0;
				fan2Btn.selected = _fanSpeed == 1;
				fan3Btn.selected = _fanSpeed == 2;
				fan4Btn.selected = _fanSpeed == 3;
				fanAutoBtn.selected = _fanSpeed == 4;
				fanSilentBtn.selected = _fanSpeed == 5;
				statesChanged();
			}
			
			private function get fanSpeed():uint{
				return _fanSpeed;
			}
			
			private function set vanne(value:uint):void{
				_vanne = value;
				vanneAutoBtn.selected = _vanne == 0;
				vanne1Btn.selected = _vanne == 1;
				vanne2Btn.selected = _vanne == 2;
				vanne3Btn.selected = _vanne == 3;
				vanne4Btn.selected = _vanne == 4;
				vanne5Btn.selected = _vanne == 5;
				vanneMoveBtn.selected = _vanne == 6;
				statesChanged();
			}
			
			private function get vanne():uint{
				return _vanne;
			}
			
			protected function onBtnClickHandler(event:MouseEvent):void
			{
				power = "on";
			}
			
			protected function offBtnClickHandler(event:MouseEvent):void
			{
				power = "off";
			}
			
			protected function hotBtnClickHandler(event:MouseEvent):void
			{
				mode = 0;
			}
			
			protected function coldBtnClickHandler(event:MouseEvent):void
			{
				mode = 1;
			}
			
			protected function dryBtnClickHandler(event:MouseEvent):void
			{
				mode = 2;
			}
			
			protected function autoBtnClickHandler(event:MouseEvent):void
			{
				mode = 3;
			}
			
			protected function fanAutoBtnClickHandler(event:MouseEvent):void
			{
				fanSpeed = 4;
			}
			
			protected function fanSilentBtnClickHandler(event:MouseEvent):void
			{
				fanSpeed = 5;
			}
		
			private function fan1BtnClickHandler(event:MouseEvent):void
			{
				fanSpeed = 0;
			}
			
			private function fan2BtnClickHandler(event:MouseEvent):void
			{
				fanSpeed = 1;
			}
			
			private function fan3BtnClickHandler(event:MouseEvent):void
			{
				fanSpeed = 2;
			}
			
			private function fan4BtnClickHandler(event:MouseEvent):void
			{
				fanSpeed = 3;
			}
			
			protected function vanneAutoBtnClickHandler(event:MouseEvent):void
			{
				vanne = 0;
			}
			
			protected function vanneMoveBtnClickHandler(event:MouseEvent):void
			{
				vanne = 6;
			}
			
			protected function vanne1BtnClickHandler(event:MouseEvent):void
			{
				vanne = 1;
			}
			
			protected function vanne2BtnClickHandler(event:MouseEvent):void
			{
				vanne = 2;
			}
			
			protected function vanne3BtnClickHandler(event:MouseEvent):void
			{
				vanne = 3;
			}
			
			protected function vanne4BtnClickHandler(event:MouseEvent):void
			{
				vanne = 4;
			}
			
			protected function vanne5BtnClickHandler(event:MouseEvent):void
			{
				vanne = 5;
			}
			
			private function loaderComplete(e:Event):void{
				showMessage("Received",false,0xd8ffb6,1000);
			}
			
			private function errorHandlerIOErrorEvent(e:IOErrorEvent):void{
				showMessage(e.text,false,0xff7a7a);
			}
			
			private function sendRequest():void{
				if(!debouncing){
					remoteStateChanged = false;
					debouncing = true;
					debounceTimer = new Timer(1000,1);
					debounceTimer.start();
					debounceTimer.addEventListener(TimerEvent.TIMER_COMPLETE,debouncingComplete);
					showMessage("Sending...",true);
					var request:URLRequest = new URLRequest("http://192.168.1.195/arduino/power="+power+",temp="+temp+",mode="+mode+",fanSpeed="+fanSpeed+",vanne="+vanne);
					try {
						loader.load(request);
					} catch (error:Error) {
						lbl.text = error.message;
						trace("Unable to load requested document.");
					}
				}
			}
			
			private function debouncingComplete(e:TimerEvent):void{
				debounceTimer.removeEventListener(TimerEvent.TIMER_COMPLETE,debouncingComplete);
				debouncing = false;
				if(remoteStateChanged)
					sendRequest();
			}

			private function tempKnobValueCommitHandler(e:FlexEvent):void{
				temp = 16 + (knob.value*16);
			}
			
			protected function knob_mouseDownHandler(event:MouseEvent):void
			{
				stage.addEventListener(MouseEvent.MOUSE_UP,mouseUpHandler);
			}
			
			private function mouseUpHandler(event:MouseEvent):void{
				stage.removeEventListener(MouseEvent.MOUSE_UP,mouseUpHandler);
				statesChanged();
			}
			
			private function showMessage(text:String,sending:Boolean,color:uint = 0xffffff,fadeAfterMilli:int = -1):void{
				lbl.alpha = 1;
				lbl.setStyle("color",color);
				lbl.text = text;
				lbl.y = sending ? 80 : -80;
				TweenMax.killTweensOf(lbl);
				TweenMax.killDelayedCallsTo(fadeMessage);
				TweenMax.to(lbl,0.5,{y:0});
				if(fadeAfterMilli != -1)
					TweenMax.delayedCall((500 + fadeAfterMilli)/1000,fadeMessage);
			}
			
			private function fadeMessage():void{
				TweenMax.to(lbl,0.5,{alpha:0});
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		
		@font-face
		{
			src:                    url("assets/fonts/MYRIADPRO-SEMIBOLD.OTF");
			font-family:            MyriadPro-SemiBold;
			font-style:             normal;
			font-weight:            normal;
			
		}
	</fx:Style>
	<s:Group id="messageGrp" width="100%" top="0">
		<s:Image source="@Embed(source='assets/images/header.png')" />
		<s:Label id="lbl" alpha="0.9" width="100%" filters="{[shadowFilter]}" paddingLeft="40" paddingRight="30" paddingTop="20" maxDisplayedLines="1" fontFamily="MyriadPro-SemiBold" color="0xffffff" fontSize="48" text=""/>
	</s:Group>
	<s:Rect bottom="0" width="100%" height="{this.height - 84}">
		<s:fill>
			<s:LinearGradient>
				<s:GradientEntry color="0x393e45"/>
				<s:GradientEntry color="0x3f444c"/>
				<s:GradientEntry color="0x393e45"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%" top="130">
		<s:VGroup width="100%" height="100%" horizontalAlign="center" gap="60">
			<s:VGroup horizontalAlign="center" gap="40">
				<s:Label filters="{[shadowFilter]}" fontFamily="MyriadPro-SemiBold" color="0xa49f9e" fontSize="50" text="Power"/>
				<s:BorderContainer width="558" height="200" backgroundColor="0x272d34" backgroundAlpha="0.2" borderColor="0x272d34" borderWeight="5" cornerRadius="30" filters="{[glowFilter]}">
					<components:DualBtn id="powerBtns" x="-2" y="23" scaleX="1.35" scaleY="1.35" btn1Lbl="On" btn2Lbl="Off"/>
				</s:BorderContainer>
			</s:VGroup>
			<s:VGroup horizontalAlign="center" gap="40">
				<s:Label filters="{[shadowFilter]}" fontFamily="MyriadPro-SemiBold" color="0xa49f9e" fontSize="50" text="Mode"/>
				<s:BorderContainer width="558" height="370" backgroundColor="0x272d34" backgroundAlpha="0.2" borderColor="0x272d34" borderWeight="5" cornerRadius="30" filters="{[glowFilter]}">
					<s:VGroup y="24" x="-2" gap="0">
						<components:DualBtn id="hotColdBtns" scaleX="1.35" scaleY="1.35" btn1Lbl="Hot" btn2Lbl="Cold"/>
						<components:DualBtn id="dryAutoBtns" scaleX="1.35" scaleY="1.35" btn1Lbl="Dry" btn2Lbl="Auto"/>
					</s:VGroup>
				</s:BorderContainer>
			</s:VGroup>
			<s:VGroup horizontalAlign="center">
				<s:Label filters="{[shadowFilter]}" fontFamily="MyriadPro-SemiBold" color="0xa49f9e" fontSize="50" text="Temperature"/>
				<s:Group width="659" height="600" filters="{[glowFilter]}">
					<s:Image source="@Embed(source='assets/images/temperatureBg.png')"/>
					<components:Knob id="knob" x="28" y="-15" 
								skinClass="components.KnobSkin"
								zeroAngle="90" 
								maxRotation="360" 
								minimum="0"
								maximum="1"
								snapToCursor="false"
								allowLooping="true"
								valueCommit="tempKnobValueCommitHandler(event)"
								width="600" height="600" mouseDown="knob_mouseDownHandler(event)"/>
					<s:Label text="{temp+'°'}" horizontalCenter="5" verticalCenter="-5" textAlign="center" fontFamily="MyriadPro-SemiBold" color="0xFFFFFF" fontSize="140"/>
				</s:Group>
			</s:VGroup>
			
			<s:VGroup height="100%" horizontalAlign="center">
				<s:Label filters="{[shadowFilter]}" fontFamily="MyriadPro-SemiBold" color="0xa49f9e" fontSize="50" text="Fan Speed"/>
				<s:HGroup>
					<s:ToggleButton id="fanAutoBtn" label="AUTO" click="fanAutoBtnClickHandler(event)"/>
					<s:ToggleButton id="fanSilentBtn" label="SILENT" click="fanSilentBtnClickHandler(event)"/>
					<s:ToggleButton id="fan1Btn" label="1" click="fan1BtnClickHandler(event)"/>
					<s:ToggleButton id="fan2Btn" label="2" click="fan2BtnClickHandler(event)"/>
					<s:ToggleButton id="fan3Btn" label="3" click="fan3BtnClickHandler(event)"/>
					<s:ToggleButton id="fan4Btn" label="4" click="fan4BtnClickHandler(event)"/>
				</s:HGroup>
			</s:VGroup>
			<s:VGroup height="100%" horizontalAlign="center">
				<s:Label filters="{[shadowFilter]}" fontFamily="MyriadPro-SemiBold" color="0xa49f9e" fontSize="50" text="Vanne"/>
				<s:HGroup>
					<s:ToggleButton id="vanneAutoBtn" label="AUTO" click="vanneAutoBtnClickHandler(event)"/>
					<s:ToggleButton id="vanneMoveBtn" label="MOVE" click="vanneMoveBtnClickHandler(event)"/>
					<s:ToggleButton id="vanne1Btn" label="1" click="vanne1BtnClickHandler(event)"/>
					<s:ToggleButton id="vanne2Btn" label="2" click="vanne2BtnClickHandler(event)"/>
					<s:ToggleButton id="vanne3Btn" label="3" click="vanne3BtnClickHandler(event)"/>
					<s:ToggleButton id="vanne4Btn" label="4" click="vanne4BtnClickHandler(event)"/>
					<s:ToggleButton id="vanne5Btn" label="5" click="vanne5BtnClickHandler(event)"/>
				</s:HGroup>
			</s:VGroup>
		</s:VGroup>
	</s:VGroup>
</s:Application>
